#!/usr/bin/env node

const os = require('os');
const Mustache = require('mustache');
const program = require('commander');
const path = require('path');
const fs = require('fs');
const pkgjson = require('../package.json');
const tplsDir = path.resolve(__dirname, '../src/tpls');
const { info, warn, success, error } = require('../src/utils/log');

program
.version(pkgjson.version, '-v, --version')
.option('-n, --modelName <name>', 'Specifies the name of the model')
.option('-d, --displayName <displayName>', 'Specifies the display name of the model')
.option('-f, --file <filename>', 'Specifies the file name of the model');

program.on('--help', function () {
    console.log('  Examples:');
    console.log('');
    console.log('    $ ibird model -n User');
    console.log('    $ ibird model -n User -d 用户');
    console.log('    $ ibird model -n User -d 用户 -f user_model.js');
    console.log('');
});

program.parse(process.argv);

if (!program.modelName || !program.displayName) return error(`The model name and display name can not be empty.`);
program.file = program.file || `${program.modelName}.js`;
program.file = path.isAbsolute(program.file) ? program.file : path.resolve(process.cwd(), 'app/models', program.file);

const template = fs.readFileSync(path.resolve(tplsDir, 'model.tpl')).toString();
const output = Mustache.render(template, {
    username: os.userInfo().username,
    created: new Date().toLocaleDateString(),
    name: program.modelName,
    displayName: program.displayName
});
fs.writeFileSync(program.file, output);
success(`Create the model successfully: ${program.file.replace(new RegExp(`${process.cwd()}/`, 'g'), '')}`);