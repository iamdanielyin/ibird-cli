#!/usr/bin/env node

const os = require('os');
const Mustache = require('mustache');
const program = require('commander');
const path = require('path');
const fs = require('fs');
const pkgjson = require('../package.json');
const tplsDir = path.resolve(__dirname, '../src/tpls');
const { info, warn, success, error } = require('../src/utils/log');

program
.version(pkgjson.version, '-v, --version')
.option('-u, --url <url>', 'Specifies the request URL')
.option('-m, --method [method]', 'Specify the request method, the default is GET')
.option('-f, --file <filename>', 'Specifies the routing file name');

program.on('--help', function () {
    console.log('  Examples:');
    console.log('');
    console.log('    $ ibird route -u /test');
    console.log('    $ ibird route -u /test -m POST');
    console.log('    $ ibird route -u /test/v1/hello -m post');
    console.log('    $ ibird route -u /test/v2/hello -m get -f user_get.js');
    console.log('');
});

program.parse(process.argv);

if (!program.url) return error(`The request URL can not be empty.`);
program.method = program.method ? program.method.toLowerCase() : 'get';
program.file = program.file || `${program.url.replace(/\//g, '_')}_${program.method}.js`;
program.file = path.isAbsolute(program.file) ? program.file : path.resolve(process.cwd(), 'app/routes', program.file);
const template = fs.readFileSync(path.resolve(tplsDir, 'route.tpl')).toString();
const output = Mustache.render(template, {
    username: os.userInfo().username,
    created: new Date().toLocaleDateString(),
    method: program.method,
    url: program.url
});
fs.writeFileSync(program.file, output);
success(`Create a route successfully: ${program.file.replace(new RegExp(`${process.cwd()}/`, 'g'), '')}`);