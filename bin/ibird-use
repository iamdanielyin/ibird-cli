#!/usr/bin/env node

const program = require('commander');
const fetch = require('node-fetch');
const unzip = require('unzip');
const path = require('path');
const chalk = require('chalk');
const fs = require('fs');
const fsx = require('fs-extra');
const pkgjson = require('../package.json');
const { info, warn, success, error } = require('../src/utils/log');

program
.version(pkgjson.version, '-v, --version')
.option('-d, --dirname <name>', 'Specify a folder name')
.option('-m, --template <github username>/<github project>[/<branch>]', 'Specify a client template')
.option('-f, --force', 'Ignore local cache');

program.on('--help', function () {
    console.log('  Examples:');
    console.log('');
    console.log('    $ ibird use -d admin -m yinfxs/ibird-admin-antd');
    console.log('    $ ibird use -d admin -m yinfxs/ibird-admin-antd');
    console.log('    $ ibird use -d admin -m yinfxs/ibird-admin-antd/master');
    console.log('    $ ibird use -d admin -m yinfxs/ibird-admin-antd -f');
    console.log('');
});

program.parse(process.argv);
/**
 * 引用模板创建项目
 * @param dirname 目录名称
 * @param template 模板标识
 * @param force 是否忽略本地缓存
 * @returns {Promise.<*>}
 */
async function useTemplate({ dirname, template, force }) {
    template = template || 'yinfxs/ibird-admin-antd';
    const successMessage = `Congratulations, using template "${template}" successfully!`;
    let templateURL = null;
    if (!dirname) return;
    let fileName = null, localCacheName = null;
    if (!template.startsWith('http')) {
        const split = template.split('/');
        if (!split.length > 1) return error(`Specify template exception, refer to the following example.`);
        split[2] = split[2] || 'master';
        templateURL = `https://codeload.github.com/${split[0]}/${split[1]}/zip/${split[2]}`;
        fileName = `${split[1]}-${split[2]}`;
        localCacheName = `${split[0]}-${fileName}`;
    }
    const zipFilePath = path.resolve(process.cwd(), `${fileName}.zip`);
    const unzipDirPath = path.resolve(process.cwd(), `${fileName}`);
    const templatesDirPath = path.resolve(__dirname, `../templates/${localCacheName}`);
    const dirnameDirPath = path.resolve(process.cwd(), `client/${dirname}`);
    // 本地存在且指定force
    if (!force) {
        try {
            const stat = fs.lstatSync(templatesDirPath);
            if (stat.isDirectory()) {
                info(`Using local caching: ${templatesDirPath}`);
                fsx.copySync(templatesDirPath, dirnameDirPath, { overwrite: true });
                return success(successMessage);
            }
        } catch (e) {
            // ignore error.
        }
    }
    info(`Start downloading template from github: ${templateURL}`);
    try {
        const res = await fetch(templateURL);
        const writeStream = fs.createWriteStream(zipFilePath);
        writeStream.on('close', function (e) {
            if (e) return error(`Download template failed: '${e}'.`);
            // 解压
            const readStream = fs.createReadStream(zipFilePath).pipe(unzip.Extract({ path: process.cwd() }));
            readStream.on('close', function (e) {
                if (e) return error(`Unzip template failed: '${e}'.`);
                success(successMessage);
                fsx.removeSync(zipFilePath);
                fsx.moveSync(unzipDirPath, dirnameDirPath, { overwrite: true });
                fsx.copySync(dirnameDirPath, templatesDirPath, { overwrite: true });
            });
        });
        res.body.pipe(writeStream);
    } catch (e) {
        error(`Download template failed: '${e}'.`);
    }
}

useTemplate(program);